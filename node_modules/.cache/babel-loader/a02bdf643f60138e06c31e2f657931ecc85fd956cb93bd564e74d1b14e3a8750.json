{"ast":null,"code":"var _jsxFileName = \"/Users/felipe/React-course/spreadsheet/src/components/Cell.js\";\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Cell(_ref) {\n  let {\n    x,\n    y,\n    cell\n  } = _ref;\n  //const [value, setValue] = useState('');\n\n  const handleChange = event => {\n    //setValue(event.target.value);\n    cell.value = event.target.value;\n  };\n  const handleBlur = () => {\n    if (cell.value.startsWith('=') && cell.value.length > 1) {\n      doSum(cell.value, 0);\n    } else {\n      cell.value = '';\n    }\n  };\n  const doSum = (val, sum) => {\n    let indexSum = val.indexOf('+');\n    let indexSub = val.indexOf('-');\n    if (indexSum > indexSub) {\n      let indexAux = val.slice(indexSum + 1, val.length).indexOf('+');\n      if (indexAux > 0) {\n        sum += checkCell(val.slice(1, indexSum));\n        doSum(val.slice(indexSum + 1, val.length), sum);\n      } else {\n        sum += checkCell(val.slice(1, indexSum)) + checkCell(val.slice(indexSum + 1, val.length));\n        cell.value = sum;\n      }\n    } else if (indexSub > indexSum) {\n      cell.value = checkCell(val.slice(1, indexSub)) - checkCell(val.slice(indexSub + 1, val.length));\n    }\n  };\n  const checkCell = num => {\n    let toReturn;\n    try {\n      toReturn = parseInt(document.getElementById(num).getAttribute('value'));\n    } catch (error) {\n      toReturn = parseInt(num);\n    }\n    return toReturn;\n  };\n  return /*#__PURE__*/_jsxDEV(\"td\", {\n    className: \"tdinput border-2 border-slate-300\",\n    children: /*#__PURE__*/_jsxDEV(\"input\", {\n      id: `${x}${y}`,\n      size: \"10\",\n      type: \"input\",\n      value: cell.value,\n      onChange: handleChange,\n      onBlur: handleBlur\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n}\n_c = Cell;\nexport default Cell;\nvar _c;\n$RefreshReg$(_c, \"Cell\");","map":{"version":3,"names":["useState","Cell","x","y","cell","handleChange","event","value","target","handleBlur","startsWith","length","doSum","val","sum","indexSum","indexOf","indexSub","indexAux","slice","checkCell","num","toReturn","parseInt","document","getElementById","getAttribute","error"],"sources":["/Users/felipe/React-course/spreadsheet/src/components/Cell.js"],"sourcesContent":["import { useState } from \"react\";\n\nfunction Cell({x,y,cell}) {\n  //const [value, setValue] = useState('');\n\n  const handleChange = (event) => {\n    //setValue(event.target.value);\n    cell.value = event.target.value;\n  }\n\n  const handleBlur = () => {\n    if (cell.value.startsWith('=') && cell.value.length > 1){\n      doSum(cell.value,0);\n    }else{\n      cell.value = '';\n    }\n  }\n\n  const doSum = (val, sum) => {\n    let indexSum = val.indexOf('+');\n    let indexSub = val.indexOf('-');\n\n    if(indexSum > indexSub){\n      let indexAux = val.slice(indexSum+1,val.length).indexOf('+')\n      if(indexAux > 0 ){\n        sum += checkCell(val.slice(1,indexSum)) ;\n        doSum(val.slice(indexSum + 1,val.length), sum);\n      }else{\n        sum += checkCell(val.slice(1,indexSum)) + checkCell(val.slice(indexSum+1,val.length))\n        cell.value = sum;\n      }      \n    }else if(indexSub > indexSum){\n      cell.value = (checkCell(val.slice(1,indexSub)) - checkCell(val.slice(indexSub+1,val.length)));\n    }\n    \n  }\n\n  const checkCell = (num) => {\n    let toReturn;\n    try {\n      toReturn = parseInt(document.getElementById(num).getAttribute('value'));\n    } catch (error) {\n      toReturn = parseInt(num);\n    }\n    return toReturn;\n  }\n\n  return (\n    <td className=\"tdinput border-2 border-slate-300\">\n      <input id={`${x}${y}`} size={\"10\"} type=\"input\" value={cell.value} onChange={handleChange} onBlur={handleBlur}></input>\n    </td>\n  );\n}\n\nexport default Cell;"],"mappings":";AAAA,SAASA,QAAQ,QAAQ,OAAO;AAAC;AAEjC,SAASC,IAAI,OAAa;EAAA,IAAZ;IAACC,CAAC;IAACC,CAAC;IAACC;EAAI,CAAC;EACtB;;EAEA,MAAMC,YAAY,GAAIC,KAAK,IAAK;IAC9B;IACAF,IAAI,CAACG,KAAK,GAAGD,KAAK,CAACE,MAAM,CAACD,KAAK;EACjC,CAAC;EAED,MAAME,UAAU,GAAG,MAAM;IACvB,IAAIL,IAAI,CAACG,KAAK,CAACG,UAAU,CAAC,GAAG,CAAC,IAAIN,IAAI,CAACG,KAAK,CAACI,MAAM,GAAG,CAAC,EAAC;MACtDC,KAAK,CAACR,IAAI,CAACG,KAAK,EAAC,CAAC,CAAC;IACrB,CAAC,MAAI;MACHH,IAAI,CAACG,KAAK,GAAG,EAAE;IACjB;EACF,CAAC;EAED,MAAMK,KAAK,GAAG,CAACC,GAAG,EAAEC,GAAG,KAAK;IAC1B,IAAIC,QAAQ,GAAGF,GAAG,CAACG,OAAO,CAAC,GAAG,CAAC;IAC/B,IAAIC,QAAQ,GAAGJ,GAAG,CAACG,OAAO,CAAC,GAAG,CAAC;IAE/B,IAAGD,QAAQ,GAAGE,QAAQ,EAAC;MACrB,IAAIC,QAAQ,GAAGL,GAAG,CAACM,KAAK,CAACJ,QAAQ,GAAC,CAAC,EAACF,GAAG,CAACF,MAAM,CAAC,CAACK,OAAO,CAAC,GAAG,CAAC;MAC5D,IAAGE,QAAQ,GAAG,CAAC,EAAE;QACfJ,GAAG,IAAIM,SAAS,CAACP,GAAG,CAACM,KAAK,CAAC,CAAC,EAACJ,QAAQ,CAAC,CAAC;QACvCH,KAAK,CAACC,GAAG,CAACM,KAAK,CAACJ,QAAQ,GAAG,CAAC,EAACF,GAAG,CAACF,MAAM,CAAC,EAAEG,GAAG,CAAC;MAChD,CAAC,MAAI;QACHA,GAAG,IAAIM,SAAS,CAACP,GAAG,CAACM,KAAK,CAAC,CAAC,EAACJ,QAAQ,CAAC,CAAC,GAAGK,SAAS,CAACP,GAAG,CAACM,KAAK,CAACJ,QAAQ,GAAC,CAAC,EAACF,GAAG,CAACF,MAAM,CAAC,CAAC;QACrFP,IAAI,CAACG,KAAK,GAAGO,GAAG;MAClB;IACF,CAAC,MAAK,IAAGG,QAAQ,GAAGF,QAAQ,EAAC;MAC3BX,IAAI,CAACG,KAAK,GAAIa,SAAS,CAACP,GAAG,CAACM,KAAK,CAAC,CAAC,EAACF,QAAQ,CAAC,CAAC,GAAGG,SAAS,CAACP,GAAG,CAACM,KAAK,CAACF,QAAQ,GAAC,CAAC,EAACJ,GAAG,CAACF,MAAM,CAAC,CAAE;IAC/F;EAEF,CAAC;EAED,MAAMS,SAAS,GAAIC,GAAG,IAAK;IACzB,IAAIC,QAAQ;IACZ,IAAI;MACFA,QAAQ,GAAGC,QAAQ,CAACC,QAAQ,CAACC,cAAc,CAACJ,GAAG,CAAC,CAACK,YAAY,CAAC,OAAO,CAAC,CAAC;IACzE,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdL,QAAQ,GAAGC,QAAQ,CAACF,GAAG,CAAC;IAC1B;IACA,OAAOC,QAAQ;EACjB,CAAC;EAED,oBACE;IAAI,SAAS,EAAC,mCAAmC;IAAA,uBAC/C;MAAO,EAAE,EAAG,GAAEpB,CAAE,GAAEC,CAAE,EAAE;MAAC,IAAI,EAAE,IAAK;MAAC,IAAI,EAAC,OAAO;MAAC,KAAK,EAAEC,IAAI,CAACG,KAAM;MAAC,QAAQ,EAAEF,YAAa;MAAC,MAAM,EAAEI;IAAW;MAAA;MAAA;MAAA;IAAA;EAAS;IAAA;IAAA;IAAA;EAAA,QACpH;AAET;AAAC,KAlDQR,IAAI;AAoDb,eAAeA,IAAI;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}