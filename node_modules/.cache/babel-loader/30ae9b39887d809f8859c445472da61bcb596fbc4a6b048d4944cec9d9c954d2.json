{"ast":null,"code":"var _jsxFileName = \"/Users/felipe/React-course/spreadsheet/src/components/Cell.js\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Cell(_ref) {\n  _s();\n  let {\n    x,\n    y,\n    cells,\n    setCells\n  } = _ref;\n  let cell = cells[x][y];\n  const info = cell.info;\n  const [isFocused, setIsFocused] = useState(false);\n  const handleChange = event => {\n    cells[x][y] = {\n      ...cell,\n      info: {\n        ...info,\n        method: event.target.value\n      }\n    };\n    setCells([...cells]);\n  };\n  const handleBlur = () => {\n    let sum = info.method;\n    if (info.method.startsWith('=') && info.method.length > 1) {\n      sum = eval(doSum(info.method));\n    }\n    cells[x][y] = {\n      ...cell,\n      info: {\n        value: sum,\n        method: info.method\n      }\n    };\n    setCells([...cells]);\n    setIsFocused(false);\n    refreshAllReferences();\n  };\n  const refreshAllReferences = () => {\n    const letters = ' ABCDEFGHIJKLMNOPQRSTUVWXYZ'.split('');\n    let index;\n    let sum;\n    console.log(info.references);\n    for (let i = 0; i < info.references.length; i++) {\n      index = letters.indexOf(coord.slice(0, 1));\n      sum = eval(doSum(cells[index][parseInt(coord.slice(1, coord.length))].info.method));\n      cells[x][y] = {\n        ...cell,\n        info: {\n          value: sum\n        }\n      };\n      setCells([...cells]);\n    }\n  };\n  const doSum = val => {\n    val = val.replace('=', '');\n    let indexSum = val.indexOf('+');\n    let indexSub = val.indexOf('-');\n    let firstIndex;\n    let op;\n    if (0 < indexSum && indexSum < indexSub || indexSub < 0 && indexSub < indexSum) {\n      firstIndex = indexSum;\n      op = '+';\n    } else if (0 < indexSub && indexSub < indexSum || indexSum < 0 && indexSum < indexSub) {\n      firstIndex = indexSub;\n      op = '-';\n    } else {\n      return checkCell(val);\n    }\n    return checkCell(val.slice(0, firstIndex)) + `${op}` + doSum(val.slice(firstIndex + 1, val.length));\n  };\n  const checkCell = coord => {\n    const letters = ' ABCDEFGHIJKLMNOPQRSTUVWXYZ'.split('');\n    let index = letters.indexOf(coord.slice(0, 1));\n    let toReturn;\n    if (index > 0) {\n      toReturn = cells[index][parseInt(coord.slice(1, coord.length))].info.value;\n      info.references.push(coord);\n      cells[x][y] = {\n        ...cell,\n        info: {\n          references: info.references\n        }\n      };\n      setCells([...cells]);\n    } else {\n      toReturn = coord;\n    }\n    return toReturn;\n  };\n  const handleFocus = () => {\n    setIsFocused(true);\n  };\n  return /*#__PURE__*/_jsxDEV(\"td\", {\n    className: \"tdinput border-2 border-slate-300\",\n    children: /*#__PURE__*/_jsxDEV(\"input\", {\n      id: `${x}${y}`,\n      size: \"10\",\n      type: \"input\",\n      value: isFocused ? info.method : info.value,\n      onChange: handleChange,\n      onBlur: handleBlur,\n      onFocus: handleFocus\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 5\n  }, this);\n}\n_s(Cell, \"taoS6m9NZex5dx3pinefKTdpShE=\");\n_c = Cell;\nexport default Cell;\nvar _c;\n$RefreshReg$(_c, \"Cell\");","map":{"version":3,"names":["useState","Cell","x","y","cells","setCells","cell","info","isFocused","setIsFocused","handleChange","event","method","target","value","handleBlur","sum","startsWith","length","eval","doSum","refreshAllReferences","letters","split","index","console","log","references","i","indexOf","coord","slice","parseInt","val","replace","indexSum","indexSub","firstIndex","op","checkCell","toReturn","push","handleFocus"],"sources":["/Users/felipe/React-course/spreadsheet/src/components/Cell.js"],"sourcesContent":["import { useState } from \"react\";\n\nfunction Cell({ x, y, cells, setCells }) {\n  let cell = cells[x][y];\n  const info = cell.info;\n  const [isFocused, setIsFocused] = useState(false);\n\n  const handleChange = (event) => {\n    cells[x][y] = { ...cell, info: { ...info, method: event.target.value } };\n    setCells([...cells])\n  }\n\n  const handleBlur = () => {\n    let sum = info.method;\n    if (info.method.startsWith('=') && info.method.length > 1) {\n      sum = eval(doSum(info.method));\n    }\n    cells[x][y] = { ...cell, info: { value: sum, method: info.method } };\n    setCells([...cells]);\n    setIsFocused(false);\n    refreshAllReferences();\n  }\n\n  const refreshAllReferences = () => {\n    const letters = ' ABCDEFGHIJKLMNOPQRSTUVWXYZ'.split('');\n    let index;\n    let sum;\n    console.log(info.references)\n    for (let i = 0; i < info.references.length; i++) {\n      index = letters.indexOf(coord.slice(0, 1))\n      sum = eval(doSum(cells[index][parseInt(coord.slice(1, coord.length))].info.method));\n      cells[x][y] = { ...cell, info: { value: sum } };\n      setCells([...cells]);\n    }\n  }\n\n  const doSum = (val) => {\n    val = val.replace('=', '')\n\n    let indexSum = val.indexOf('+');\n    let indexSub = val.indexOf('-');\n    let firstIndex;\n    let op;\n\n    if ((0 < indexSum && indexSum < indexSub) || (indexSub < 0 && indexSub < indexSum)) {\n      firstIndex = indexSum;\n      op = '+';\n    } else if ((0 < indexSub && indexSub < indexSum) || (indexSum < 0 && indexSum < indexSub)) {\n      firstIndex = indexSub;\n      op = '-';\n    } else {\n      return checkCell(val);\n    }\n    return checkCell(val.slice(0, firstIndex)) + `${op}` + doSum(val.slice(firstIndex + 1, val.length));\n  }\n\n  const checkCell = (coord) => {\n    const letters = ' ABCDEFGHIJKLMNOPQRSTUVWXYZ'.split('');\n    let index = letters.indexOf(coord.slice(0, 1));\n    let toReturn;\n\n    if (index > 0) {\n      toReturn = cells[index][parseInt(coord.slice(1, coord.length))].info.value;\n      info.references.push(coord);\n      cells[x][y] = { ...cell, info: { references: info.references } };\n      setCells([...cells]);\n    } else {\n      toReturn = coord;\n    }\n    return toReturn;\n  }\n\n  const handleFocus = () => {\n    setIsFocused(true);\n  }\n\n  return (\n    <td className=\"tdinput border-2 border-slate-300\">\n      <input id={`${x}${y}`} size={\"10\"} type=\"input\" value={isFocused ? info.method : info.value} onChange={handleChange} onBlur={handleBlur} onFocus={handleFocus}></input>\n    </td>\n  );\n}\n\nexport default Cell;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}